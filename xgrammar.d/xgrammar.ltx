\documentclass[12pt]{amsart}

\usepackage[final]{listings}
\usepackage{float}
\floatstyle{boxed}
\restylefloat{figure}
\usepackage{arydshln}

\usepackage{amssymb}
\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage{xspace}
\usepackage{graphicx}
\usepackage{ragged2e}
\usepackage{url}
\usepackage[final]{hyperref}
\usepackage{placeins}
\usepackage{mfirstuc}
\usepackage{ifdraft}
\usepackage[obeyDraft]{todonotes}
\usepackage{datetime2}
\ifdraft{
    \usepackage{draftwatermark}
}{}

% Fix conflict between todonotes and amsart packages
% See http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/todonotes/todonotes.pdf,
% p. 10.
\makeatletter
\providecommand\@dotsep{5}
\def\listtodoname{List of TODOs}
\def\listoftodos{\@starttoc{tdo}\listtodoname}
\makeatother

\makeatletter
\renewcommand{\listofalgorithms}{\@starttoc{loa}{List of algorithms}}
\let\l@algorithm=\l@figure
\makeatother

% Re hbox's, see
% https://tex.stackexchange.com/questions/241343/what-is-the-meaning-of-fussy-sloppy-emergencystretch-tolerance-hbadness
\raggedbottom

% Replaced by todonotes package
% \newcommand{\todo}[1]{\par{\large\bf Todo: #1}\par}

\newcommand{\mymathop}[1]{\mathop{\texttt{#1}}}
\newcommand{\mymathbin}[1]{\mathbin{\texttt{#1}}}

% For a type name, when it occurs in text
\newcommand{\type}[1]{\ensuremath{\texttt{#1}}}

\newcommand{\mult}{\mathbin{\ast}}
\newcommand{\dfn}[1]{{\bf #1}}
\newcommand{\sep}{\,\mid\,}
\newcommand{\mydot}{\raisebox{.05em}{$\,\bullet\,$}}
\newcommand{\cat}{\,.\,}
\newcommand{\size}[1]{\ensuremath{\left | {#1} \right |}}
\newcommand{\Vsize}[1]{\ensuremath{\size{\var{#1}}}}
\newcommand{\bigsize}[1]{\ensuremath{\bigl| {#1} \bigr|}}
\newcommand{\order}[1]{\ensuremath{{\mathcal O}(#1)}\xspace}
\newcommand{\Oc}{\order{1}}
\newcommand{\On}{\order{\var{n}}}
\newcommand{\inference}[2]{\genfrac{}{}{1pt}{}{#1}{#2}}

\newcommand{\lastix}[1]{\ensuremath{\##1}}
\newcommand{\Vlastix}[1]{\ensuremath{\lastix{\V{#1}}}}
\newcommand{\VlastElement}[1]{\Velement{#1}{\Vlastix{#1}}}
\newcommand{\element}[2]{\ensuremath{\mathop{#1}
    \mathopen{}\left[#2\right]\mathclose{}}}
\newcommand{\Velement}[2]{\ensuremath{\mathop{\V{#1}}
    \mathopen{}\left[#2\right]\mathclose{}}}
\newcommand{\VVelement}[2]{\ensuremath{\mathop{\V{#1}}
    \mathopen{}\left[ \V{#2}
    \right]\mathclose{} }}

\newcommand{\tuple}[1]{\ensuremath{\left\langle #1 \right\rangle}}

\newcommand{\mcolon}{\mathrel:}
\newcommand{\mcoloncolon}{\mathrel{\vcenter{\hbox{$::$}}}}

\newcommand{\suchthat}{\mcoloncolon}
\newcommand{\quantify}[3]{% quantifier, binding, predicate
    \ensuremath{\mathrel{#1}#2 \; \suchthat \; #3}%
}

% I use hyphens in variable names,
% so I need to ensure that subtraction is
% clearly distinguished by the typography
\newcommand{\subtract}{\,-\,}

\newcommand{\var}[1]{\ensuremath{\texttt{#1}}}
\newcommand{\V}[1]{\ensuremath{\texttt{\mbox{#1}}}}

\newcommand{\cfg}{CFG}

\newcommand{\de}{\mathrel{::=}}
\newcommand{\derives}{\Rightarrow}
\newcommand{\destar}
    {\mathrel{\mbox{$\:\stackrel{\!{\ast}}{\Rightarrow\!}\:$}}}
\newcommand{\deplus}
    {\mathrel{\mbox{$\:\stackrel{\!{+}}{\Rightarrow\!}\:$}}}
\newcommand{\derivg}[1]{\mathrel{\mbox{$\:\Rightarrow\:$}}}
\newcommand{\derivrg}[2]{\mathrel{\mbox{$\:\stackrel{\!{#1}}%
        {\Rightarrow\!}\:$}}}

% For the type subscript for powersets
\newcommand{\setOf}[1]{{{#1}^{\mbox{\normalsize $\ast$}}}}

\newcommand{\set}[1]{{\left\lbrace #1 \right\rbrace} }
\newcommand{\bigset}[1]{{\bigl\lbrace #1 \bigr\rbrace} }
\newcommand{\Bigset}[1]{{\Bigl\lbrace #1 \Bigr\rbrace} }

% use internal counter of algorithmicx
\newcommand{\algnested}{ %
  \makeatletter\ALG@nested\makeatother %
}

\newcommand{\algstrut}{\rule{0pt}{.85\baselineskip}}

\newcommand{\myparbox}[2][\algparwidth]{%
  \parbox[t]{#1}{%
  % \linespread{1.15}\selectfont
  \ignorespaces#2\par%
  }%
}

\newcommand{\parcomment}[2]{\hspace{\dimexpr \algorithmicindent * #1}$\triangleright$ #2}

% \newcommand{\rawparcomment}[2][\algparwidth]{%
  % \myparbox[#1]{#2}%
% }
% \newcommand{\parcomment}[2][\algparwidth]{%
  % \myparbox[#1]{$\triangleright$ #2}%
% }
% \newcommand{\parcomment}[1]{\hspace{\dimexpr \algorithmicindent - \labelwidth }$\triangleright$
  % \protect\parbox[t]{\dimexpr \textwidth - (\algorithmicindent - \labelwidth)}{#1}%
% }

% I want to use 'call' outside of pseudocode
\newcommand\call[2]{\textproc{#1}\ifthenelse{\equal{#2}{}}{}{(#2)}}%

\newcommand{\mname}[1]{\mbox{\sf #1}}
% [O]perator [A]pplication
\newcommand{\Oname}[1]{\mname{#1}}
% The \mathopen{} and \mathclose{} eliminate unwanted extra space
\newcommand{\OA}[2]{\ensuremath{%
    \mathop{\Oname{#1}}\mathopen{}\left(#2\right)\mathclose{}%
}}
\newcommand{\VOA}[2]{\OA{#1}{\V{#2}}}
% [F]unction [A]pplication, replaces \myfn
\newcommand{\smallrawfn}[2]{\ensuremath{\mathop{#1}(#2)}}
% The \mathopen{} and \mathclose{} eliminate unwanted extra space
\newcommand{\rawfn}[2]{\ensuremath{\mathop{#1}\mathopen{}\left(#2\right)\mathclose{}}}
\newcommand{\Fname}[1]{\V{#1}}
\newcommand{\FA}[2]{\ensuremath{\rawfn{\mathop{\Fname{#1}}}{#2}}}
\newcommand{\VFA}[2]{\FA{#1}{\V{#2}}}

\hyphenation{oper-and oper-ands}
\hyphenation{look-ahead}
\hyphenation{memo-ization}

% I like to silence underfull hbox messages.
% This is syntactic sugar for doing that.
\newenvironment{MYsloppy}[1][3em]{\par\tolerance9999 \emergencystretch#1\relax}{\par}
% This form allows the resetting of hbadness, which may be necessary to
% shut up an "underfull" warning.
\newenvironment{MYsloppyB}[2]{\par\tolerance9999 \emergencystretch#1 \hbadness#2\relax}{\par}
% This form is for a trick:  Tolerances are evaluated line by line, so a tolerance
% less than 9999 may produce a better looking paragraph and reduce the "badness".
\newenvironment{MYsloppyC}[3]{\par\tolerance#3 \emergencystretch#1 \hbadness#2\relax}{\par}

\title
  [Thoughts about XGrammar]
  {Thoughts about XGrammar}

\author{Jeffrey Kegler}
\ifdraft{
    % legacy draftwatermark options -- update?
    \SetWatermarkLightness{0}
    \SetWatermarkText{DRAFT \DTMnow{} DRAFT}
    \SetWatermarkAngle{0}
    % \SetWatermarkScale{1}
    % \SetWatermarkHorCenter{1.5in}
    \SetWatermarkVerCenter{.5in}
}{}
\ifdraft{ \thanks{DRAFT as of \DTMnow} }{}
\date{\DTMnow.}

\begin{document}

\maketitle
\tableofcontents

\section{Background}

I have some comments about XGrammar\cite{XGrammar2024} which I hope will
be useful.

XGrammar's parse engine is a PDA.  These seem to be fascinating the
AI realm, despite the parsing literature up to now treating them as of
strictly theoretical interest.\footnote{%
	From \cite{AH1972v1}, p. 281:
	``It should be clearly stated at the outset that backtrack parsing
	algorithms should be shunned in most practical applications.''}

Why are PDA's being revisited?  Every parsing method becomes a general BNF
parsing method when you add backtracking.  This means that, repeatedly in
the history of parsing, a technology which is fashionable, attractive,
or genuinely successful in its original form, has backtracking added to
it, and attracts a following.  GLR and regexes are two examples.

Typically the base technology is something programmers are already
comfortable with, or intrigued by.  When LR was in fashion, GLR, a
backtracking form of it, became the hot topic.  Regular expressions,
of course, are highly useful and will always be in heavy use.  This led
Perl's regex package to add features which made it a backtracking general
BNF parser.  Backtracking easily goes exponential, and users of regex
packages quickly receive a Pavlovian training to avoid features which
use backtracking.

PDA's, I conjecture, are attractive because, like regexes, they are
based on regular expressions.  In one form of implementation, a PDA is a
backtracking stack of regular expressions.  Since modern programmers are
comfortable with both regular expressions and stacks, this offers
the hope that PDA's are a manageable parsing method.  Which for small
examples, can be the case.

\section{Time complexity}

All backtracking methods have two major pitfalls, neither of which
PDA's avoid.  First, backtracking easily goes exponential.  Users of
backtracking parsers are banking on their application falling into a
``sweet spot'', where their application is complex enough to justify a
backtracking parser in place of a simpler and safer one, but small enough
that the exponential won't catch up with them.  The record for adoption
of backtracking methods over the decades shows that this ``sweet spot''
is small indeed.

JSON might well fall into this sweet spot, or close to it.  JSON is a
small and simple language -- it was designed to be parsed with a recursive
descent parser of modest size.  The need for backtracking and lookahead
in JSON is about as minimal as you will find in any practically useful
language, so use of PDA's for parsing it may be tractable.
But one can wonder, if the target app for XGrammar was
to be strictly JSON, whether a simpler and safer
parsing method would not have sufficed.

\section{Debugging and tracking}

A second pitfall is often overlooked.  Practical parsers must allow
maintenance, debugging and tracking.  Grammar and input debugging is
perhaps the best illustration of this.  If the programmer expects a
grammar to accept an input, and it does not,
in the presence of backtracking,
it is very hard to tell
where the problem occurred.\footnote{%
	In fact, in XGrammar the parsing data structure that is backtracked
	over is a
	``persistent execution stack''.\cite[Section 3.3]{XGrammar2024}
	\cite{XGrammar2024} does not discuss error recovery,
	but it looks like it would be even more complex than
	error recovery in an ordinary backtracking implementation.}

This is the case even in a small grammar.
As the application
scales, the debugging can soon become, for practical purposes, impossible.

Earley parsing, particularly in the form llguidance and Marpa use it, are
much friendlier to debugging.  llguidance doesn't
yet take full advantage of this, but Marpa does.  How Marpa's focused
error messages show the programmer exactly where things went wrong,
and allow them to explore the context, is described in detail in Marpa's
documentation.\cite{MarpaProgress}  Nothing like this has been achieved using a backtracking
parser.  In fact, Earley parsers are much more debugging-friendly than
traditional parsers.  This is because Earley tables store a lot of
information about the parse that is useful for debugging.
In the name of efficiency, traditional parsers
like LR and recursive descent
discard,
or do not track in the first place,
a lot of information about the parse.
This make traditional
parsers less capable of helping
a programmer in pursuit of a bug.

\section{Remarks on ``context expansion''}

The XGrammar paper\cite[Section 3.2]{XGrammar2024}
introduces a technique called context expansion.
This is a form of lookahead,
a technique much explored in the parsing literature.

Their context expansion algorithm does not recurse through
rules,
causing it to miss many context expansions (aka lookaheads),
as they acknowledge indirectly.\footnote{%
	``Although we do not consider rule-referencing edges
	   when extracting the expanded context automata,
	   this algorithm can still extract many [much?]
	   useful information.'' Section 3.2, \cite{XGrammar2024}.
	}
In order to alleviate this issue in specific cases,
they use ``Rule inlining''\cite[Section 3.4]{XGrammar2024},
which essentially flattens pairs of rules into a single rule.
The lookahead provided by ``context expansion'' is apparently enough
to deal with JSON strings,
which are their example.\cite[Figure 6]{XGrammar2024}.

The parsing literature contains algorithms for computing
lookahead tables, which can deal with rule recursion,
so why \cite{XGrammar2024} chooses the methods it did
is unclear.
One reason may be that they require an automaton,
but the transformation from a lookahead table to an
automaton seems as if it should be straightforward.

{

% Ragged right, do not hyphenate.
\RaggedRight
\hyphenpenalty=10000
\exhyphenpenalty=10000

% Silence current hbox warnings, but allow them if
% badness increases further
\hbadness=2000

\begin{thebibliography}{10}

\bibitem{XGrammar2024}
\newblock{Yixin Dong, Charlie F. Ruan, Yaxing Cai, Ruihang Lai, Ziyi Xu, Yilong Zhao and Tianqi Chen.}
\newblock{``XGrammar: Flexible and Efficient Structured Generation Engine for Large Language Models''.}
\newblock{\url{https://arxiv.org/abs/2411.15100}.
	Retrieved 12 Dec 2024.}

\bibitem{MarpaProgress}
\newblock{Jeffrey Kegler.}
\newblock{``Marpa::R2::Progress''}.
\newblock{\url{https://metacpan.org/dist/Marpa-R2/view/pod/Progress.pod}.
	Retrieved 12 Dec 2024.}

\bibitem{AH1972v1}
\newblock{Aho, Alfred V., and Jeffrey D. Ullman.}
\newblock{\em The theory of parsing, translation, and compiling. Vol. 1.}
\newblock{Prentice-Hall, 1972.}

\end{thebibliography}

} % RaggedRight

% \clearpage
% \phantomsection
% \listofalgorithms

\ifdraft{
    \clearpage
    \phantomsection
    \listoftodos
}{}

\end{document}
